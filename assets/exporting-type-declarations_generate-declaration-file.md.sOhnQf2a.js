import{_ as s,c as i,o as a,U as e}from"./chunks/framework.sZ7TM61z.js";const y=JSON.parse('{"title":"Generate Declaration File Setup","description":"","frontmatter":{},"headers":[],"relativePath":"exporting-type-declarations/generate-declaration-file.md","filePath":"exporting-type-declarations/generate-declaration-file.md"}'),t={name:"exporting-type-declarations/generate-declaration-file.md"},n=e(`<h1 id="generate-declaration-file-setup" tabindex="-1">Generate Declaration File Setup <a class="header-anchor" href="#generate-declaration-file-setup" aria-label="Permalink to &quot;Generate Declaration File Setup&quot;">​</a></h1><p>In some scenarios, you may have a react-native project and a web project as separate repositories.</p><p>Exporting types is a key part of <code>webview-bridge</code>, so here&#39;s a guide to sharing types across different projects. This guide is for moving types from methods declared in the <code>React Native Project</code> to the <code>Web Project</code>.</p><h2 id="steps-for-exporting-types" tabindex="-1">Steps for Exporting Types <a class="header-anchor" href="#steps-for-exporting-types" aria-label="Permalink to &quot;Steps for Exporting Types&quot;">​</a></h2><h3 id="_1-installing-dts-bundle-generator" tabindex="-1">1. Installing dts-bundle-generator: <a class="header-anchor" href="#_1-installing-dts-bundle-generator" aria-label="Permalink to &quot;1. Installing dts-bundle-generator:&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>For more information and additional details, please visit the dts-bundle-generator GitHub repository at <a href="https://github.com/timocov/dts-bundle-generator" target="_blank" rel="noreferrer">https://github.com/timocov/dts-bundle-generator</a>.</p></div><p>To start, you&#39;ll need to add dts-bundle-generator to your project. This is done using the following command:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-234dA" id="tab-JHv-rD3" checked="checked"><label for="tab-JHv-rD3">npm</label><input type="radio" name="group-234dA" id="tab-noBoVId"><label for="tab-noBoVId">pnpm</label><input type="radio" name="group-234dA" id="tab-TrRvN2q"><label for="tab-TrRvN2q">yarn</label></div><div class="blocks"><div class="language-sh vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dts-bundle-generator</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dts-bundle-generator</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dts-bundle-generator</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --dev</span></span></code></pre></div></div></div><h3 id="_2-creating-the-build-configuration-file" tabindex="-1">2. Creating the Build Configuration File: <a class="header-anchor" href="#_2-creating-the-build-configuration-file" aria-label="Permalink to &quot;2. Creating the Build Configuration File:&quot;">​</a></h3><p>Next, create a <code>tsconfig.build.json</code> file with the necessary compiler options:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;skipLibCheck&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;esModuleInterop&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ES6&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // You should also put in the \`jsx\`, \`paths\` fields if you want.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-redefining-bridge-functions" tabindex="-1">3. Redefining Bridge Functions: <a class="header-anchor" href="#_3-redefining-bridge-functions" aria-label="Permalink to &quot;3. Redefining Bridge Functions:&quot;">​</a></h3><p>Define your bridge functions in a separate file for clarity and organization. For example, create a <code>src/bridge.ts</code> file:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This file is src/bridge.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { bridge } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@webview-bridge/react-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InAppBrowser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;react-native-inappbrowser-reborn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> appBridge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bridge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;I&#39;m from native&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> openInAppBrowser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InAppBrowser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isAvailable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InAppBrowser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppBridge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appBridge;</span></span></code></pre></div><h3 id="_4-generating-type-definitions" tabindex="-1">4. Generating Type Definitions: <a class="header-anchor" href="#_4-generating-type-definitions" aria-label="Permalink to &quot;4. Generating Type Definitions:&quot;">​</a></h3><p>Use <code>dts-bundle-generator</code> to create your type definitions file:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-A1ZvC" id="tab-HGrx9MI" checked="checked"><label for="tab-HGrx9MI">npm</label><input type="radio" name="group-A1ZvC" id="tab-60IC74v"><label for="tab-60IC74v">pnpm</label><input type="radio" name="group-A1ZvC" id="tab-EG29V19"><label for="tab-EG29V19">yarn</label></div><div class="blocks"><div class="language-sh vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dts-bundle-generator</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.ts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/bridge.ts</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --project=tsconfig.build.json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-check</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dts-bundle-generator</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.ts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/bridge.ts</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --project=tsconfig.build.json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-check</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dts-bundle-generator</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.ts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/bridge.ts</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --project=tsconfig.build.json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-check</span></span></code></pre></div></div></div><h3 id="_5-copying-the-type-definitions-file" tabindex="-1">5. Copying the Type Definitions File: <a class="header-anchor" href="#_5-copying-the-type-definitions-file" aria-label="Permalink to &quot;5. Copying the Type Definitions File:&quot;">​</a></h3><p>Once you have generated output.ts, copy this file to your web project.</p><h3 id="_6-importing-in-the-web-project" tabindex="-1">6. Importing in the Web Project: <a class="header-anchor" href="#_6-importing-in-the-web-project" aria-label="Permalink to &quot;6. Importing in the Web Project:&quot;">​</a></h3><p>In your web project, import the types as shown below:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { AppBridge } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./output&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bridge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> linkBridge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AppBridge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span></code></pre></div><p>By following these steps, you ensure that type consistency and interoperability are maintained across your React Native and web projects, even when they are housed in multi repositories.</p>`,23),p=[n];function l(h,r,k,d,o,g){return a(),i("div",null,p)}const F=s(t,[["render",l]]);export{y as __pageData,F as default};
